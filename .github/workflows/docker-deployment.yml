name: Deploy Loumo API

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: npm ci
        working-directory: ./main
      - name: Run linter
        run: npm run lint
        working-directory: ./main

  build:
    name: Build API
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: npm ci
        working-directory: ./main
      - name: Build project
        run: npm run build
        working-directory: ./main

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Set env vars
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "DEPLOY_DIR=~/deployments/wintercode-api/current" >> $GITHUB_ENV

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << EOF
            set -euo pipefail

            DEPLOY_DIR=~/deployments/wintercode-api/current

            if [ ! -d $DEPLOY_DIR ]; then
              mkdir -p $DEPLOY_DIR
              git clone https://github.com/${{ github.repository }} $DEPLOY_DIR
            else
              cd $DEPLOY_DIR
              git pull origin main
            fi

            cd $DEPLOY_DIR

            cp ~/deployments/wintercode-api/shared/.env.prod .env.prod
            export DOCKER_BUILDKIT=0

            # Tag the current image as previous (if exists)
            if docker images | grep loumo; then
              docker tag loumo:latest loumo:previous || true
            fi

            # Remove any containers that might conflict
            docker rm -f mongo_loumo loumo 2>/dev/null || true

            # Build and run the new image
            COMPOSE_PROJECT_NAME=default docker compose -f docker-compose.yml --env-file .env.prod build
            COMPOSE_PROJECT_NAME=default docker compose -f docker-compose.yml --env-file .env.prod up -d

            # Health check loop
            for i in {1..10}; do
              if curl --fail http://localhost:4000/health; then
                echo "‚úÖ Health check passed"
                break
              fi
              echo "‚è≥ Waiting for app to be ready... ($i/10)"
              sleep 6
            done

            if curl --fail http://localhost:4000/health; then
              # Tag the running image as current
              docker tag loumo:latest loumo:current
              echo "‚úÖ Deployment successful and image tagged as current"
            else
              echo "‚ùå Health check failed, rolling back"
              # Stop the failed container
              docker rm -f loumo 2>/dev/null || true
              # Remove the failed image
              docker rmi loumo:latest || true
              # Re-run the previous image if it exists
              if docker images | grep loumo | grep previous; then
                docker tag loumo:previous loumo:latest
                COMPOSE_PROJECT_NAME=default docker compose -f docker-compose.yml --env-file .env.prod up -d
                # Tag the rolled-back image as current
                docker tag loumo:latest loumo:current
                echo "üîÑ Rolled back to previous image and tagged as current"
              else
                echo "‚ö†Ô∏è No previous image to roll back to"
              fi
              exit 1
            fi

            echo "üéØ Deployment complete"
            exit 0
          EOF

      - name: Confirm remote session is done
        run: echo "üß† SSH session completed cleanly"
